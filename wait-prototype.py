# import psycopg2 
 
# connection = psycopg2.connection ( 
#     dbname = "fffhfdjfhdhdhd", 
#     user = "postgres", 
#     password = "", 
#     host = "localhost", 
#     port = "5432" 
# ) 
 
# cursor = connection.cursor() 
 
# cursor.execute("SELECT first_name || last_name FROM employees WHERE salary BETWEEN 60000 AND 70000 AND hire_date > '2022-01-01'") 
  
import telebot
from telebot import types
from threading import Timer
import time

bot = telebot.TeleBot('7619704061:AAE4SCDk52PWdBNiGNbqpzbAeZEb6B4GD4k')

# Data Structures
queue = []  # List of users in the queue
queue_status = {}  # Details about each user
current_applicant = None  # Currently being served
applicant_timer = None

# Admin/Manager Data
admin_id = 1167373997  # initial admin
managers = set([admin_id])  # Set of manager IDs

# Constants
DEFAULT_TIMER_SECONDS = 120  # 2 minutes for the applicant to show up

# Utility Functions
def is_manager(user_id):
    """Checks if a user is a manager or admin."""
    return user_id in managers

# Command Handlers
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏! üïí\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
        "/help - –ü–æ–º–æ—â—å"
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    if is_manager(message.chat.id):
        help_text += (
            "\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/call_next - –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
            "/end_conversation - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Ç–µ–∫—É—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
            "/no_show - –ü–æ–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫ –Ω–µ—è–≤–∏–≤—à–µ–≥–æ—Å—è\n"
            "/queue_list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏\n"
            "/add_manager - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
            "/remove_manager - –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        )
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['register'])
def register(message):
    
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    bot.register_next_step_handler(message, get_registration_name)


def get_registration_name(message):
    
    user_id = message.chat.id
    user_name = message.text

    if user_id in queue_status:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏! ‚úÖ")
    else:
        queue_status[user_id] = {"name": user_name}
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(message, get_registration_details)


def get_registration_details(message):

    user_id = message.chat.id
    queue_status[user_id]["room"] = message.text

    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞:")
    bot.register_next_step_handler(message, finalize_registration)


def finalize_registration(message):

    user_id = message.chat.id
    user_purpose = message.text

    queue_status[user_id]["purpose"] = user_purpose
    queue.append(user_id)
    queue_status[user_id]["position"] = len(queue)
    bot.send_message(
        user_id,
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä: {queue_status[user_id]['position']}\n"
        f"–ò–º—è: {queue_status[user_id]['name']}\n"
        f"–ö–∞–±–∏–Ω–µ—Ç: {queue_status[user_id]['room']}\n"
        f"–¶–µ–ª—å: {queue_status[user_id]['purpose']}"
    )


@bot.message_handler(commands=['status'])
def status(message):
    user_id = message.chat.id
    if user_id in queue_status:
        position = queue_status[user_id]['position']
        bot.send_message(user_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {position}")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")


@bot.message_handler(commands=['leave'])
def leave_queue(message):

    user_id = message.chat.id
    if user_id in queue_status:
        queue.remove(user_id)
        del queue_status[user_id]
        update_queue_positions()
        bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏.")


@bot.message_handler(commands=['add_manager'])
def add_manager(message):
    if message.chat.id != admin_id:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    bot.register_next_step_handler(message, add_manager_handler)


def add_manager_handler(message):
    try:
        new_manager_id = int(message.text)
        managers.add(new_manager_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_manager_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")


@bot.message_handler(commands=['remove_manager'])
def remove_manager(message):
    if message.chat.id != admin_id:
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, remove_manager_handler)


def remove_manager_handler(message):
    try:
        manager_id = int(message.text)
        if manager_id in managers:
            managers.remove(manager_id)
            bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        else:
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")


@bot.message_handler(commands=['queue_list'])
def queue_list(message):
    if not is_manager(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not queue:
        bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    queue_details = "–û—á–µ—Ä–µ–¥—å:\n"
    for idx, user_id in enumerate(queue, start=1):
        user_data = queue_status[user_id]
        queue_details += (
            f"{idx}. –ò–º—è: {user_data['name']}, –ö–∞–±–∏–Ω–µ—Ç: {user_data['room']}, "
            f"–¶–µ–ª—å: {user_data['purpose']}, ID: {user_id}\n"
        )
    bot.send_message(message.chat.id, queue_details)


@bot.message_handler(commands=['call_next'])
def call_next(message):
    global current_applicant, applicant_timer

    if applicant_timer:
        applicant_timer.cancel()

    if queue:
        current_applicant = queue.pop(0)
        user_data = queue_status.pop(current_applicant)
        bot.send_message(current_applicant, "–í–∞—à —á–µ—Ä—ë–¥! –ü–æ–¥–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
        bot.send_message(
            message.chat.id,
            f"–í—ã–∑–≤–∞–Ω {user_data['name']}. –£ –Ω–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–π—Ç–∏."
        )
        # Start the timer
        applicant_timer = Timer(DEFAULT_TIMER_SECONDS, move_queue_due_to_no_show)
        applicant_timer.start()
    else:
        bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")


@bot.message_handler(commands=['end_conversation'])
def end_conversation(message):
    global current_applicant, applicant_timer

    if current_applicant:
        bot.send_message(current_applicant, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        current_applicant = None

    if applicant_timer:
        applicant_timer.cancel()

    bot.send_message(message.chat.id, "–ö–æ–Ω–µ—Ü —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É.")


@bot.message_handler(commands=['no_show'])
def no_show(message):
    global current_applicant, applicant_timer

    if current_applicant:
        bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
        current_applicant = None

    if applicant_timer:
        applicant_timer.cancel()

    bot.send_message(message.chat.id, "–ß–µ–ª–æ–≤–µ–∫ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—è–≤–∏–≤—à–∏–π—Å—è. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π.")
    call_next(message)


def move_queue_due_to_no_show():
    global current_applicant
    if current_applicant:
        bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
        current_applicant = None


def update_queue_positions():
    for idx, user_id in enumerate(queue):
        queue_status[user_id]['position'] = idx + 1



if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
