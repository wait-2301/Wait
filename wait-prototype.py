import telebot
import psycopg2
from threading import Timer
import os
from dotenv import load_dotenv
import services.QueueService as qm


load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

db_conn = psycopg2.connect(
    dbname='wait',
    user='postgres',
    password='qwerty',   # "1234" or "qwerty"
    host='localhost',
    port='5432'
)
db_conn.autocommit = True

# bot = telebot.TeleBot('7610327249:AAHFW8oNcFzu2HCuz5zH2Kcj0Xl0G00_8Ms')
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

current_applicant = None
applicant_timer = None
DEFAULT_TIMER_SECONDS = 120

def is_manager(user_id):
    print("USER COUNT BY ", user_id, " = ", qm.get_managers_count_by_user_id_service(user_id))
    count = qm.get_managers_count_by_user_id_service(user_id)

    return count > 0

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏! üïí\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/help - –ü–æ–º–æ—â—å"
    )

@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏\n"
        "/leave - –ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )
    if is_manager(message.chat.id):
        help_text += (
            "\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/call_next - –í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏\n"
            "/end_conversation - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Ç–µ–∫—É—â–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º\n"
            "/no_show - –ü–æ–º–µ—Ç–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫ –Ω–µ—è–≤–∏–≤—à–µ–≥–æ—Å—è\n"
            "/queue_list - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏\n"
            "/add_manager - –ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞\n"
            "/remove_manager - –£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        )
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['register'])
def register(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
    bot.register_next_step_handler(message, get_registration_name)

def get_registration_name(message):
    user_id = message.chat.id
    user_name = message.text

    users_count = qm.get_queue_count_by_user_id_service(user_id)
    if users_count > 0:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏! ‚úÖ")
    else:
        bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –º–µ—Å—Ç–æ:")
        bot.register_next_step_handler(message, lambda msg: get_registration_details(msg, user_name))


def get_registration_details(message, user_name):
    user_id = message.chat.id
    room = message.text
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: finalize_registration(msg, user_name, room))

def finalize_registration(message, user_name, room):
    user_id = message.chat.id
    purpose = message.text

    position = qm.get_next_position_service()
    qm.insert_into_queue_service(user_id, user_name, room, purpose, position)

    bot.send_message(
        user_id,
        f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
        f"–í–∞—à –Ω–æ–º–µ—Ä: {position}\n"
        f"–ò–º—è: {user_name}\n"
        f"–ö–∞–±–∏–Ω–µ—Ç: {room}\n"
        f"–¶–µ–ª—å: {purpose}"
    )

@bot.message_handler(commands=['status'])
def status(message):
    user_id = message.chat.id
    result = qm.get_user_position_service(user_id)

    if result:
        bot.send_message(user_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {result[0]}")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")



@bot.message_handler(commands=['leave'])
def leave_queue(message):
    user_id = message.chat.id
    qm.delete_user_from_queue_service(user_id)
    bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")

@bot.message_handler(commands=['queue_list'])
def queue_list(message):
    if not is_manager(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    queue = qm.get_all_queue_entries_service()
    bot.send_message(message.chat.id, queue)


@bot.message_handler(commands=['call_next'])
def call_next(message):
    global current_applicant, applicant_timer

    if applicant_timer:
        applicant_timer.cancel()

    with db_conn.cursor() as cur:
        cur.execute("SELECT * FROM queue ORDER BY position LIMIT 1")
        applicant = cur.fetchone()
        if applicant:
            current_applicant = applicant[1]  # user_id
            cur.execute("DELETE FROM queue WHERE id = %s", (applicant[0],))
            bot.send_message(current_applicant, "–í–∞—à —á–µ—Ä—ë–¥! –ü–æ–¥–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            bot.send_message(
                message.chat.id,
                f"–í—ã–∑–≤–∞–Ω {applicant[2]}. –£ –Ω–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–π—Ç–∏."
            )
            applicant_timer = Timer(DEFAULT_TIMER_SECONDS, move_queue_due_to_no_show)
            applicant_timer.start()
        else:
            bot.send_message(message.chat.id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

@bot.message_handler(commands=['end_conversation'])
def end_conversation(message):
    global current_applicant, applicant_timer

    if current_applicant:
        bot.send_message(current_applicant, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        current_applicant = None

        if applicant_timer:
            applicant_timer.cancel()

        bot.send_message(message.chat.id, "–ö–æ–Ω–µ—Ü —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")


@bot.message_handler(commands=['no_show'])
def no_show(message):
    global current_applicant, applicant_timer

    if current_applicant:
        bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
        current_applicant = None

    if applicant_timer:
        applicant_timer.cancel()

    call_next(message)

@bot.message_handler(commands=['add_manager'])
def add_manager(message):
    if not is_manager(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    bot.register_next_step_handler(message, add_manager_handler)


def add_manager_handler(message):
    try:
        new_manager_id = int(message.text)
        with db_conn.cursor() as cur:
            cur.execute("""
                INSERT INTO managers (user_id) 
                VALUES (%s) 
                ON CONFLICT (user_id) DO NOTHING
            """, (new_manager_id,))

        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_manager_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")

@bot.message_handler(commands=['remove_manager'])
def remove_manager(message):
    if not is_manager(message.chat.id):
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, remove_manager_handler)




def remove_manager_handler(message):
    try:
        manager_id = int(message.text)
        with db_conn.cursor() as cur:
            cur.execute("DELETE FROM managers WHERE user_id = %s", (manager_id,))
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")

def move_queue_due_to_no_show():
    global current_applicant
    if current_applicant:
        bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
        current_applicant = None

if __name__ == "__main__":
    bot.polling(none_stop=True, interval=0)
