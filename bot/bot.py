import telebot
from telebot import types
from threading import Timer, Lock
import os
from dotenv import load_dotenv
import services.queue_service as qm
from services.queue_service import is_manager

from utils.decorators import manager_only

load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# Thread-safe storage for manager-specific data
managers_data = {}
lock = Lock()
DEFAULT_TIMER_SECONDS = 180

MESSAGE_ALREADY_REGISTERED = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏! ‚úÖ"


CALLBACK_REGISTER = "register"
CALLBACK_STATUS = "status"
CALLBACK_LEAVE = "leave"
CALLBACK_HELP = "help"
CALLBACK_QUEUE_LIST = "queue_list"
CALLBACK_CALL_NEXT = "call_next"
CALLBACK_CALL_NEXT_BY_ID = "call_next_by_id"
CALLBACK_END_CONVERSATION = "end_conversation"
CALLBACK_NO_SHOW = "no_show"
CALLBACK_MANAGERS_LIST = "managers_list"
CALLBACK_ADD_MANAGER = "add_manager"
CALLBACK_REMOVE_MANAGER = "remove_manager"


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):

    action = call.data
    
    if action == CALLBACK_REGISTER:
        bot.answer_callback_query(call.id, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...")
        register(call.message)
    elif action == CALLBACK_STATUS:
        bot.answer_callback_query(call.id, text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        status(call.message)
    elif action == CALLBACK_LEAVE:
        bot.answer_callback_query(call.id, text="–í—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
        leave_queue(call.message)
    elif action == CALLBACK_HELP:
        bot.answer_callback_query(call.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–∫–∏...")
        help_command(call.message)    
    elif action == CALLBACK_QUEUE_LIST:
        bot.answer_callback_query(call.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –æ—á–µ—Ä–µ–¥–∏...")
        queue_list(call.message)
    elif action == CALLBACK_CALL_NEXT:
        bot.answer_callback_query(call.id, text="–í—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
        call_next_by_default(call.message)
    elif action == CALLBACK_CALL_NEXT_BY_ID:
        bot.answer_callback_query(call.id, text="–í—ã–∑–æ–≤ –ø–æ –ò–î...")
        call_next_by_id(call.message)
    elif action == CALLBACK_END_CONVERSATION:
        bot.answer_callback_query(call.id, text="–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...")
        end_conversation(call.message)
    elif action == CALLBACK_NO_SHOW:
        bot.answer_callback_query(call.id, text="–û—Ç–º–µ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è...")
        no_show(call.message)
    elif action == CALLBACK_MANAGERS_LIST:
        bot.answer_callback_query(call.id, text="–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...")
        get_managers_list_table(call.message)
    elif action == CALLBACK_ADD_MANAGER:
        bot.answer_callback_query(call.id, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        add_manager(call.message)
    elif action == CALLBACK_REMOVE_MANAGER:
        bot.answer_callback_query(call.id, text="–£–¥–∞–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        remove_manager(call.message)


@bot.message_handler(func=lambda message: message.text.lower() in ["start", "/start"])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏! üïí\n")
    main_applicant_commnads(message)    
        

def main_applicant_commnads(message):

    button_register = types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏', callback_data='register')
    button_status = types.InlineKeyboardButton('–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏', callback_data='status')
    button_leave = types.InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å –æ—á–µ—Ä–µ–¥—å', callback_data='leave')
    button_help = types.InlineKeyboardButton('–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', callback_data='help')

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(button_register)
    keyboard.add(button_status)
    keyboard.add(button_leave)
    keyboard.add(button_help)
    bot.send_message(message.chat.id, 
                     text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n", reply_markup=keyboard)



@bot.message_handler(func=lambda message: message.text.lower() in ["help", "/help"])
def help_command(message):
    # main_applicant_commnads(message)

    if is_manager(message.chat.id):
       
        button_call_next = types.InlineKeyboardButton('–í—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ', callback_data='call_next')
        button_call_next_by_id = types.InlineKeyboardButton('–í—ã–∑–≤–∞—Ç—å –ø–æ ID', callback_data='call_next_by_id')
        button_end_conversation = types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä', callback_data='end_conversation')
        button_no_show = types.InlineKeyboardButton('–ß–µ–ª–æ–≤–µ–∫–∞ –Ω–µ—è–≤–∏–ª—Å—è', callback_data='no_show')
        button_queue_list = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–∏', callback_data='queue_list')
        button_managers_list = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤', callback_data='managers_list')
        button_add_manager = types.InlineKeyboardButton('–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data='add_manager')
        button_remove_manager = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞', callback_data='remove_manager')

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(button_call_next)
        keyboard.add(button_call_next_by_id)
        keyboard.add(button_end_conversation)
        keyboard.add(button_no_show)
        keyboard.add(button_queue_list)
        keyboard.add(button_managers_list)
        keyboard.add(button_add_manager)
        keyboard.add(button_remove_manager)

        # bot.send_message(message.chat.id, text='–ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:', reply_markup=keyboard)
        bot.send_message(message.chat.id, text='_ –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: _', reply_markup=keyboard, parse_mode="Markdown")
    


@bot.message_handler(func=lambda message: message.text.lower() in ["register", "/register"])
def register(message):
    user_id = message.chat.id
    if is_manager(user_id):
        bot.send_message(message.chat.id, "–í—ã –º–µ–Ω–µ–¥–∂–µ—Ä. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã.")
        return

    users_count = qm.get_queue_count_by_user_id_service(user_id)
    if users_count > 0:
         bot.send_message(user_id, MESSAGE_ALREADY_REGISTERED)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:")
        bot.register_next_step_handler(message, get_registration_first_name)

def get_registration_first_name(message):
    user_id = message.chat.id
    first_name = message.text
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —Ñ–∞–º–∏–ª–∏—é:")
    bot.register_next_step_handler(message, lambda msg: get_registration_last_name(msg, first_name))    

def get_registration_last_name(message, first_name):
    user_id = message.chat.id
    full_name = first_name  + " " + message.text
    bot.send_message(user_id, "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å –≤–∏–∑–∏—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: finalize_registration(msg, full_name))

def finalize_registration(message, user_name):
    user_id = message.chat.id
    purpose = message.text

    room_id = None
    qm.insert_into_queue_service(user_id, user_name, room_id, purpose)
    queue = qm.get_queue_by_user_id_service(user_id)
    bot.send_message(
        user_id,
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏! –í–∞—à –Ω–æ–º–µ—Ä ‚Äî {queue.queue_number}. –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—ã–∑–æ–≤–µ—Ç –≤–∞—Å –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É."
    )



@bot.message_handler(func=lambda message: message.text.lower() in ["status", "/status"])
def status(message):
    user_id = message.chat.id
    result = qm.get_user_queue_number_service(user_id)

    if is_manager(user_id):
        bot.send_message(message.chat.id, "–í—ã –º–µ–Ω–µ–¥–∂–µ—Ä. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ /help —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–º –∫–æ–º–∞–Ω–¥—ã.")
        return
    if result:
        bot.send_message(user_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {result[0]}")
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—á–µ—Ä–µ–¥–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register.")



@bot.message_handler(func=lambda message: message.text.lower() in ["leave", "/leave"])
def leave_queue(message):
    user_id = message.chat.id
    delete_user_from_queue(user_id)
    bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")



@bot.message_handler(func=lambda message: message.text.lower() in ["queue_list", "/queue_list"])
@manager_only(is_manager, bot)
def queue_list(message):
    queue = qm.get_all_queue_entries_table()
    bot.send_message(message.chat.id, queue, parse_mode="Markdown")


def prompt_for_applicant_id(manager_id, message):
    bot.send_message(manager_id, "–£–∫–∞–∂–∏—Ç–µ id applicant:")
    bot.register_next_step_handler(message, lambda msg: handle_applicant_id_input(msg, manager_id))

def handle_applicant_id_input(message, manager_id):
    applicant_queue_number = message.text
    applicant_user_id = qm.get_queue_by_queue_number_service(applicant_queue_number).user_id
    call_next(manager_id, applicant_user_id)

def call_next(manager_id, applicant_user_id):
    if not applicant_user_id:
        bot.send_message(manager_id, "–ù–µ —É–∫–∞–∑–∞–Ω applicant ID.")
        return

    with lock:
        if manager_id not in managers_data:
            managers_data[manager_id] = {"current_applicant": None, "applicant_timer": None}

        manager_data = managers_data[manager_id]
        
        if manager_data["applicant_timer"]:
            manager_data["applicant_timer"].cancel()
        manager_data["current_applicant"] = applicant_user_id
        process_queue_for_applicant(manager_id, applicant_user_id)

        timer = Timer(DEFAULT_TIMER_SECONDS, lambda: move_queue_due_to_no_show(manager_id))
        manager_data["applicant_timer"] = timer
        timer.start()

def process_queue_for_applicant(manager_id, applicant_user_id):
    user_queue = qm.get_queue_by_user_id_service(applicant_user_id)
    room = qm.get_room_by_manager_user_id_service(manager_id)
    qm.set_room_for_queue_service(user_queue.id, room.id)
    qm.set_status_for_queue(user_queue.id, 'IN_PROGRESS')
    qm.set_room_status_service(room.id, 'OCCUPIED')
    notify_applicant_and_manager(user_queue, room, manager_id)

def notify_applicant_and_manager(user_queue, room, manager_id):
    time_in_minutes = int(DEFAULT_TIMER_SECONDS/60)
    bot.send_message(user_queue.user_id, f"–í–∞—à —á–µ—Ä—ë–¥! –ü–æ–¥–æ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫ —Å—Ç–æ–ª—É {room.room_name}. –£ –≤–∞—Å {time_in_minutes} –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–π—Ç–∏.")
    bot.send_message(manager_id, f"–í—ã–∑–≤–∞–Ω {user_queue.queue_number} –Ω–∞ —Å—Ç–æ–ª {room.room_name}. –£ –Ω–µ–≥–æ {time_in_minutes} –º–∏–Ω—É—Ç—ã, —á—Ç–æ–±—ã –ø–æ–¥–æ–π—Ç–∏.")




@bot.message_handler(func=lambda message: message.text.lower() in ["call_next", "/call_next"])
@manager_only(is_manager, bot)
def call_next_by_default(message):
    manager_id = message.chat.id
    applicant = qm.get_first_queue()
    if applicant:
        call_next(manager_id, applicant.user_id)
    else:
        bot.send_message(manager_id, "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")



@bot.message_handler(func=lambda message: message.text.lower() in ["call_next_by_id", "/call_next_by_id"])
@manager_only(is_manager, bot)
def call_next_by_id(message):
    manager_id = message.chat.id
    prompt_for_applicant_id(manager_id, message)



@bot.message_handler(func=lambda message: message.text.lower() in ["end_conversation", "/end_conversation"])
@manager_only(is_manager, bot)
def end_conversation(message):
    manager_id = message.chat.id
    with lock:
        if manager_id not in managers_data or not managers_data[manager_id]["current_applicant"]:
            bot.send_message(manager_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")
            return
        current_applicant = managers_data[manager_id]["current_applicant"]
        bot.send_message(current_applicant, "–í–∞—à–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
        queue_id = qm.get_queue_by_user_id_service(current_applicant).id
        qm.set_status_for_queue(queue_id, 'END_CONVERSATION')
        print(qm.get_queue_by_user_id_service(current_applicant))
        delete_user_from_queue(current_applicant)

        managers_data[manager_id]["current_applicant"] = None
        if managers_data[manager_id]["applicant_timer"]:
            managers_data[manager_id]["applicant_timer"].cancel()
        
        bot.send_message(manager_id, "–ö–æ–Ω–µ—Ü —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É.")



@bot.message_handler(func=lambda message: message.text.lower() in ["no_show", "/no_show"])
@manager_only(is_manager, bot)
def no_show(message):
    manager_id = message.chat.id
    with lock:
        if manager_id not in managers_data or not managers_data[manager_id]["current_applicant"]:
            bot.send_message(manager_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.")
            return
        current_applicant = managers_data[manager_id]["current_applicant"]
        bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ. \n –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å /register")
        queue_id = qm.get_queue_by_user_id_service(current_applicant).id
        qm.set_status_for_queue(queue_id, 'NO_SHOW')
        delete_user_from_queue(current_applicant)
    

        managers_data[manager_id]["current_applicant"] = None
        if managers_data[manager_id]["applicant_timer"]:
            managers_data[manager_id]["applicant_timer"].cancel()

        bot.send_message(manager_id, "–ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤—ã–∑–æ–≤—É.")
        

def move_queue_due_to_no_show(manager_id):
    with lock:
        if manager_id in managers_data and managers_data[manager_id]["current_applicant"]:
            current_applicant = managers_data[manager_id]["current_applicant"]
            queue_id = qm.get_queue_by_user_id_service(current_applicant).id
            qm.set_status_for_queue(queue_id, 'NO_SHOW')
            bot.send_message(manager_id, "–ê–ø–ª–∏–∫–∞–Ω—Ç –Ω–µ –ø–æ–¥–æ—à–æ–ª –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
            bot.send_message(current_applicant, "–í—ã –Ω–µ –ø–æ–¥–æ—à–ª–∏ –≤–æ–≤—Ä–µ–º—è. –û—á–µ—Ä–µ–¥—å –¥–≤–∏–∂–µ—Ç—Å—è –¥–∞–ª—å—à–µ.")
            delete_user_from_queue(current_applicant)
            managers_data[manager_id]["current_applicant"] = None



@bot.message_handler(func=lambda message: message.text.lower() in ["managers_list", "/managers_list"])
@manager_only(is_manager, bot)
def get_managers_list_table(message):
    managers = qm.get_managers_with_rooms_table()
    bot.send_message(message.chat.id, managers, parse_mode="Markdown")



@bot.message_handler(func=lambda message: message.text.lower() in ["add_manager", "/add_manager"])
@manager_only(is_manager, bot)
def add_manager(message):
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    bot.register_next_step_handler(message, add_room_for_manager)


def add_room_for_manager(message):
    new_manager_id = str(message.text)
    rooms_table = qm.get_unassigned_rooms_table_service()
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    bot.send_message(message.chat.id, rooms_table, parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda msg: add_manager_handler(msg, new_manager_id))


def add_manager_handler(message, new_manager_id):
    try:
        new_manager_room_id = qm.get_room_id_by_room_name_service(str(message.text))
        if new_manager_room_id is None:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –°—Ç–æ–ª–∞.")
            return
        qm.add_manager_by_user_id_service(new_manager_id, message.chat.id, new_manager_room_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_manager_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.")
        bot.send_message(new_manager_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã —Ç–µ–ø–µ—Ä—å –º–µ–Ω–µ–¥–∂–µ—Ä.")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")


@bot.message_handler(func=lambda message: message.text.lower() in ["remove_manager", "/remove_manager"])
@manager_only(is_manager, bot)
def remove_manager(message):
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, remove_manager_handler)


def remove_manager_handler(message):
    try:
        manager_id = int(message.text)
        qm.remove_manager_service(manager_id)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {manager_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        bot.send_message(manager_id, f"–í—ã –±–æ–ª–µ–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Wait. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–∞–±–æ—Ç—É!!!")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π ID.")


def delete_user_from_queue(user_id):
    user_queue = qm.get_queue_by_user_id_service(user_id)
    if user_queue:
        qm.set_room_status_service(user_queue.room_id, 'AVAILABLE')
        qm.delete_user_from_queue_service(user_id)
        print("Deleted!!! ")



# def save_log_in_queue_history(queue, ):


if __name__ == "bot":
    bot.polling(none_stop=True, interval=0)

